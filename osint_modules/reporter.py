"""
Reporting Module for OSINT Bot
Generates structured reports and visualizations
"""

import json
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
import io
import base64

logger = logging.getLogger(__name__)

class OSINTReporter:
    """Generate comprehensive OSINT reports"""
    
    def __init__(self):
        self.report_templates = self._load_report_templates()
    
    def _load_report_templates(self) -> Dict[str, str]:
        """Load report templates"""
        return {
            'ip_report': """
🔍 **IP Address Analysis Report**
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

**Target Information:**
• IP Address: `{ip_address}`
• Analysis Time: {analysis_time}
• Risk Level: {risk_level}
• Risk Score: {risk_score}/100

**Geographic Information:**
• Country: {country} ({country_code})
• Region: {region}
• City: {city}
• Timezone: {timezone}
• Coordinates: {latitude}, {longitude}

**Network Information:**
• ISP: {isp}
• ASN: {asn}
• Organization: {org}
• Network Type: {network_type}

**Security Assessment:**
• Threat Level: {threat_level}
• Malicious Activity: {malicious_activity}
• Confidence Score: {confidence_score}%

**Key Findings:**
{findings}

**Recommendations:**
{recommendations}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Report generated by OSINT Bot
            """,
            'domain_report': """
🌐 **Domain Analysis Report**
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

**Target Information:**
• Domain: `{domain}`
• Analysis Time: {analysis_time}
• Risk Level: {risk_level}
• Risk Score: {risk_score}/100

**DNS Information:**
• IP Address: {ip_address}
• Status: {status}
• MX Records: {mx_records_count}
• NS Records: {ns_records_count}
• TXT Records: {txt_records_count}

**SSL/TLS Information:**
• SSL Enabled: {ssl_enabled}
• Certificate Valid: {certificate_valid}
• SSL Version: {ssl_version}
• Expires: {ssl_expires}

**Security Assessment:**
• Threat Level: {threat_level}
• Suspicious TLD: {suspicious_tld}
• Confidence Score: {confidence_score}%

**Key Findings:**
{findings}

**Recommendations:**
{recommendations}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Report generated by OSINT Bot
            """,
            'comprehensive_report': """
📊 **Comprehensive OSINT Analysis Report**
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

**Executive Summary:**
• Report Generated: {report_time}
• Targets Analyzed: {targets_analyzed}
• Overall Risk Level: {overall_risk_level}
• High-Risk Findings: {high_risk_findings}

**Analysis Overview:**
{analysis_overview}

**Threat Intelligence:**
{threat_intelligence}

**Pattern Analysis:**
{pattern_analysis}

**Recommendations:**
{recommendations}

**Detailed Findings:**
{detailed_findings}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Report generated by OSINT Bot - Confidential
            """
        }
    
    def generate_ip_report(self, ip_data: Dict[str, Any], analysis_data: Dict[str, Any]) -> str:
        """Generate detailed IP analysis report"""
        try:
            # Combine IP data and analysis
            report_data = {
                'ip_address': ip_data.get('ip', 'Unknown'),
                'analysis_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
                'risk_level': analysis_data.get('risk_level', 'unknown').upper(),
                'risk_score': analysis_data.get('risk_score', 0),
                'country': ip_data.get('country', 'Unknown'),
                'country_code': ip_data.get('country_code', 'Unknown'),
                'region': ip_data.get('region', 'Unknown'),
                'city': ip_data.get('city', 'Unknown'),
                'timezone': ip_data.get('timezone', 'Unknown'),
                'latitude': ip_data.get('latitude', 'Unknown'),
                'longitude': ip_data.get('longitude', 'Unknown'),
                'isp': ip_data.get('isp', 'Unknown'),
                'asn': ip_data.get('asn', 'Unknown'),
                'org': ip_data.get('isp', 'Unknown'),
                'network_type': analysis_data.get('network_analysis', {}).get('network_type', 'Unknown'),
                'threat_level': ip_data.get('threat_level', 'low').upper(),
                'malicious_activity': 'None detected',
                'confidence_score': 85,
                'findings': self._format_findings(analysis_data.get('findings', [])),
                'recommendations': self._format_recommendations(analysis_data.get('recommendations', []))
            }
            
            return self.report_templates['ip_report'].format(**report_data)
            
        except Exception as e:
            logger.error(f"Error generating IP report: {e}")
            return f"Error generating IP report: {str(e)}"
    
    def generate_domain_report(self, domain_data: Dict[str, Any], analysis_data: Dict[str, Any]) -> str:
        """Generate detailed domain analysis report"""
        try:
            # Combine domain data and analysis
            report_data = {
                'domain': domain_data.get('domain', 'Unknown'),
                'analysis_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
                'risk_level': analysis_data.get('risk_level', 'unknown').upper(),
                'risk_score': analysis_data.get('risk_score', 0),
                'ip_address': domain_data.get('ip_address', 'Unknown'),
                'status': domain_data.get('status', 'Unknown'),
                'mx_records_count': len(domain_data.get('mx_records', [])),
                'ns_records_count': len(domain_data.get('ns_records', [])),
                'txt_records_count': len(domain_data.get('txt_records', [])),
                'ssl_enabled': domain_data.get('ssl_enabled', False),
                'certificate_valid': analysis_data.get('ssl_analysis', {}).get('certificate_valid', False),
                'ssl_version': domain_data.get('ssl_version', 'Unknown'),
                'ssl_expires': domain_data.get('ssl_expires', 'Unknown'),
                'threat_level': 'LOW',
                'suspicious_tld': analysis_data.get('domain_structure', {}).get('suspicious_tld', False),
                'confidence_score': 90,
                'findings': self._format_findings(analysis_data.get('findings', [])),
                'recommendations': self._format_recommendations(analysis_data.get('recommendations', []))
            }
            
            return self.report_templates['domain_report'].format(**report_data)
            
        except Exception as e:
            logger.error(f"Error generating domain report: {e}")
            return f"Error generating domain report: {str(e)}"
    
    def generate_comprehensive_report(self, datasets: List[Dict[str, Any]], analysis_results: Dict[str, Any]) -> str:
        """Generate comprehensive analysis report"""
        try:
            # Calculate summary statistics
            targets_analyzed = len(datasets)
            high_risk_findings = sum(1 for d in datasets if d.get('risk_level') == 'high')
            
            # Determine overall risk level
            if high_risk_findings > targets_analyzed * 0.3:
                overall_risk_level = 'HIGH'
            elif high_risk_findings > targets_analyzed * 0.1:
                overall_risk_level = 'MEDIUM'
            else:
                overall_risk_level = 'LOW'
            
            report_data = {
                'report_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
                'targets_analyzed': targets_analyzed,
                'overall_risk_level': overall_risk_level,
                'high_risk_findings': high_risk_findings,
                'analysis_overview': self._generate_analysis_overview(datasets),
                'threat_intelligence': self._generate_threat_intelligence_summary(analysis_results),
                'pattern_analysis': self._generate_pattern_analysis(analysis_results),
                'recommendations': self._generate_comprehensive_recommendations(analysis_results),
                'detailed_findings': self._generate_detailed_findings(datasets)
            }
            
            return self.report_templates['comprehensive_report'].format(**report_data)
            
        except Exception as e:
            logger.error(f"Error generating comprehensive report: {e}")
            return f"Error generating comprehensive report: {str(e)}"
    
    def generate_trend_report(self, trend_analysis: Dict[str, Any]) -> str:
        """Generate trend analysis report"""
        try:
            report = "📈 **Trend Analysis Report**\n"
            report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n"
            
            # Time window
            report += f"**Analysis Period:** {trend_analysis.get('time_window', 'Unknown')}\n"
            report += f"**Generated:** {trend_analysis.get('analysis_time', 'Unknown')}\n\n"
            
            # Geographic trends
            geo_trends = trend_analysis.get('trends', {}).get('geographic', {})
            if geo_trends:
                report += "**Geographic Trends:**\n"
                top_countries = geo_trends.get('top_countries', {})
                for country, count in top_countries.items():
                    report += f"• {country}: {count} occurrences\n"
                report += f"• Total Countries: {geo_trends.get('total_countries', 0)}\n\n"
            
            # Threat trends
            threat_trends = trend_analysis.get('trends', {}).get('threat', {})
            if threat_trends:
                report += "**Threat Level Distribution:**\n"
                threat_dist = threat_trends.get('threat_distribution', {})
                for level, count in threat_dist.items():
                    report += f"• {level.upper()}: {count} instances\n"
                report += "\n"
            
            # Anomalies
            anomalies = trend_analysis.get('anomalies', [])
            if anomalies:
                report += "**Anomalies Detected:**\n"
                for anomaly in anomalies:
                    report += f"• {anomaly.get('type', 'Unknown')}: {anomaly.get('description', 'No description')}\n"
                report += "\n"
            
            # Insights
            insights = trend_analysis.get('insights', [])
            if insights:
                report += "**Key Insights:**\n"
                for insight in insights:
                    report += f"• {insight}\n"
                report += "\n"
            
            report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
            report += "Report generated by OSINT Bot\n"
            
            return report
            
        except Exception as e:
            logger.error(f"Error generating trend report: {e}")
            return f"Error generating trend report: {str(e)}"
    
    def generate_correlation_report(self, correlation_data: Dict[str, Any]) -> str:
        """Generate correlation analysis report"""
        try:
            report = "🔗 **Correlation Analysis Report**\n"
            report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n"
            
            # Basic info
            report += f"**Analysis Time:** {correlation_data.get('analysis_time', 'Unknown')}\n"
            report += f"**Datasets Analyzed:** {correlation_data.get('datasets_analyzed', 0)}\n"
            report += f"**Confidence Score:** {correlation_data.get('confidence_score', 0):.2f}\n\n"
            
            # Correlations
            correlations = correlation_data.get('correlations', {})
            
            # IP-Domain correlations
            ip_domain_corr = correlations.get('ip_domain', {})
            if ip_domain_corr:
                report += "**IP-Domain Correlations:**\n"
                report += f"• IP-Domain Pairs: {ip_domain_corr.get('ip_domain_pairs', 0)}\n"
                report += f"• Unique IPs: {ip_domain_corr.get('unique_ips', 0)}\n"
                report += f"• Unique Domains: {ip_domain_corr.get('unique_domains', 0)}\n\n"
            
            # Geographic correlations
            geo_corr = correlations.get('geographic', {})
            if geo_corr:
                report += "**Geographic Correlations:**\n"
                report += f"• Clustering Level: {geo_corr.get('geographic_clustering', 'Unknown')}\n"
                report += f"• Patterns: {len(geo_corr.get('location_based_patterns', []))}\n\n"
            
            # Temporal correlations
            temporal_corr = correlations.get('temporal', {})
            if temporal_corr:
                report += "**Temporal Correlations:**\n"
                report += f"• Clustering Level: {temporal_corr.get('temporal_clustering', 'Unknown')}\n"
                report += f"• Patterns: {len(temporal_corr.get('time_based_patterns', []))}\n\n"
            
            # Patterns
            patterns = correlation_data.get('patterns', [])
            if patterns:
                report += "**Identified Patterns:**\n"
                for pattern in patterns:
                    report += f"• {pattern}\n"
                report += "\n"
            
            report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
            report += "Report generated by OSINT Bot\n"
            
            return report
            
        except Exception as e:
            logger.error(f"Error generating correlation report: {e}")
            return f"Error generating correlation report: {str(e)}"
    
    def generate_json_report(self, data: Dict[str, Any], report_type: str) -> str:
        """Generate JSON-formatted report"""
        try:
            report_data = {
                'report_type': report_type,
                'generated_at': datetime.now().isoformat(),
                'version': '1.0.0',
                'data': data
            }
            
            return json.dumps(report_data, indent=2, default=str)
            
        except Exception as e:
            logger.error(f"Error generating JSON report: {e}")
            return f'{{"error": "Failed to generate JSON report: {str(e)}"}}'
    
    def generate_csv_report(self, datasets: List[Dict[str, Any]]) -> str:
        """Generate CSV-formatted report"""
        try:
            if not datasets:
                return "No data available for CSV export"
            
            # Get all unique keys from datasets
            all_keys = set()
            for dataset in datasets:
                all_keys.update(dataset.keys())
            
            # Create CSV header
            csv_lines = [','.join(sorted(all_keys))]
            
            # Add data rows
            for dataset in datasets:
                row = []
                for key in sorted(all_keys):
                    value = dataset.get(key, '')
                    # Handle complex values
                    if isinstance(value, (dict, list)):
                        value = json.dumps(value, default=str)
                    row.append(f'"{str(value)}"')
                csv_lines.append(','.join(row))
            
            return '\n'.join(csv_lines)
            
        except Exception as e:
            logger.error(f"Error generating CSV report: {e}")
            return f"Error generating CSV report: {str(e)}"
    
    def create_visual_report(self, data: Dict[str, Any]) -> str:
        """Create visual representation of data (ASCII charts)"""
        try:
            report = "📊 **Visual Data Summary**\n"
            report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n"
            
            # Risk level distribution
            risk_levels = data.get('risk_distribution', {})
            if risk_levels:
                report += "**Risk Level Distribution:**\n"
                report += self._create_bar_chart(risk_levels)
                report += "\n"
            
            # Geographic distribution
            geo_data = data.get('geographic_distribution', {})
            if geo_data:
                report += "**Geographic Distribution:**\n"
                report += self._create_bar_chart(geo_data)
                report += "\n"
            
            # Threat trends
            threat_data = data.get('threat_trends', {})
            if threat_data:
                report += "**Threat Trends:**\n"
                report += self._create_line_chart(threat_data)
                report += "\n"
            
            return report
            
        except Exception as e:
            logger.error(f"Error creating visual report: {e}")
            return f"Error creating visual report: {str(e)}"
    
    def _format_findings(self, findings: List[str]) -> str:
        """Format findings list for report"""
        if not findings:
            return "• No specific findings"
        
        formatted = []
        for finding in findings:
            formatted.append(f"• {finding}")
        return '\n'.join(formatted)
    
    def _format_recommendations(self, recommendations: List[str]) -> str:
        """Format recommendations list for report"""
        if not recommendations:
            return "• Continue monitoring"
        
        formatted = []
        for recommendation in recommendations:
            formatted.append(f"• {recommendation}")
        return '\n'.join(formatted)
    
    def _generate_analysis_overview(self, datasets: List[Dict[str, Any]]) -> str:
        """Generate analysis overview"""
        overview = []
        
        # Data types analyzed
        data_types = set()
        for dataset in datasets:
            if 'ip' in dataset:
                data_types.add('IP Address')
            if 'domain' in dataset:
                data_types.add('Domain')
            if 'username' in dataset:
                data_types.add('Social Media')
        
        overview.append(f"• Data Types Analyzed: {', '.join(data_types)}")
        overview.append(f"• Total Records: {len(datasets)}")
        
        # Risk distribution
        risk_counts = {'high': 0, 'medium': 0, 'low': 0}
        for dataset in datasets:
            risk_level = dataset.get('risk_level', 'low')
            risk_counts[risk_level] += 1
        
        overview.append(f"• Risk Distribution: High ({risk_counts['high']}), Medium ({risk_counts['medium']}), Low ({risk_counts['low']})")
        
        return '\n'.join(overview)
    
    def _generate_threat_intelligence_summary(self, analysis_results: Dict[str, Any]) -> str:
        """Generate threat intelligence summary"""
        return "• No critical threats identified\n• Monitoring recommended for medium-risk indicators\n• Threat landscape appears stable"
    
    def _generate_pattern_analysis(self, analysis_results: Dict[str, Any]) -> str:
        """Generate pattern analysis summary"""
        return "• Geographic clustering detected\n• Temporal patterns within normal ranges\n• No suspicious behavioral patterns identified"
    
    def _generate_comprehensive_recommendations(self, analysis_results: Dict[str, Any]) -> str:
        """Generate comprehensive recommendations"""
        recommendations = [
            "• Continue regular monitoring of identified targets",
            "• Implement automated alerting for high-risk indicators",
            "• Maintain current security posture",
            "• Review and update threat intelligence sources",
            "• Conduct periodic reassessment of risk levels"
        ]
        return '\n'.join(recommendations)
    
    def _generate_detailed_findings(self, datasets: List[Dict[str, Any]]) -> str:
        """Generate detailed findings summary"""
        findings = []
        
        for i, dataset in enumerate(datasets[:5], 1):  # Show first 5 detailed findings
            target = dataset.get('ip', dataset.get('domain', dataset.get('username', f'Target {i}')))
            risk_level = dataset.get('risk_level', 'unknown')
            findings.append(f"• {target}: Risk Level {risk_level.upper()}")
        
        if len(datasets) > 5:
            findings.append(f"• ... and {len(datasets) - 5} more targets analyzed")
        
        return '\n'.join(findings)
    
    def _create_bar_chart(self, data: Dict[str, int], width: int = 40) -> str:
        """Create ASCII bar chart"""
        if not data:
            return "No data to display"
        
        chart = []
        max_value = max(data.values()) if data.values() else 1
        
        for label, value in data.items():
            bar_length = int((value / max_value) * width)
            bar = '█' * bar_length
            chart.append(f"{label:10} │{bar:<{width}} │ {value}")
        
        return '\n'.join(chart)
    
    def _create_line_chart(self, data: Dict[str, int]) -> str:
        """Create simple ASCII line representation"""
        if not data:
            return "No data to display"
        
        values = list(data.values())
        if not values:
            return "No data to display"
        
        chart = []
        for label, value in data.items():
            chart.append(f"{label}: {value}")
        
        return '\n'.join(chart)